[{"/home/huzzthedeveloper/Desktop/Projects/chatapp/src/index.js":"1","/home/huzzthedeveloper/Desktop/Projects/chatapp/src/App.jsx":"2"},{"size":155,"mtime":1611736513384,"results":"3","hashOfConfig":"4"},{"size":3715,"mtime":1611773286546,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"fqsqpo",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/home/huzzthedeveloper/Desktop/Projects/chatapp/src/index.js",[],["12","13"],"/home/huzzthedeveloper/Desktop/Projects/chatapp/src/App.jsx",["14","15"],"import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport styled from 'styled-components';\nimport profile from './profile.jpeg';\nimport './App.css';\n\n\nconst Input = styled.div`\n opacity : ${({show}) => show ? 1 : 0};\n position : absolute;\n top: 50px;\n left: 10px;\n width:300px;\n height: 6vh;\n display:flex;\n`;\n\nclass App extends Component {\n\n  state = {\n    isConnected:false,\n    id:null,\n    oldmsgs : [],\n    text : '',\n    name : 'Guest',\n    show : false,\n    val:''\n  }\n  socket = null\n\n  date = new Date();\n\n  componentWillMount(){\n\n    this.socket = io('https://codi-server.herokuapp.com');\n\n    this.socket.on('connect', () => {\n      this.setState({id : this.socket.io.engine.id});\n      this.setState({isConnected:true})\n    })\n\n\n    this.socket.on('peeps',(people)=>{\n      this.setState({peeps : [...people]})\n    })\n\n    this.socket.on('disconnect', () => {\n      this.setState({isConnected:false})\n    })\n\n    this.socket.on(\"next\", (message_from_server) => {\n      console.log(message_from_server);\n      console.log('here');\n    });\n\n    /** this will be useful way, way later **/\n    this.socket.on('room', old_messages => {\n      this.setState({oldmsgs : old_messages})\n    })\n\n  }\n\n  componentWillUnmount(){\n    this.socket.close()\n    this.socket = null\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Input show={this.state.show}>\n          <input type=\"text\" placeholder=\"New name\" \n          onChange={e => this.setState({val : e.target.value})}\n          />\n          <button\n          onClick={e => {\n            e.preventDefault();\n            if(this.state.val) {\n              this.setState({name:this.state.val})\n              this.setState({show:false})\n            }else {\n              this.setState({show:false})\n\n            }\n           \n          }}\n          >Change</button>\n        </Input>\n        <div className=\"header\">\n        <img src={profile} width=\"30px\"/>\n        <h3 className=\"status\"\n        onClick={(e) => {\n          e.preventDefault();\n          this.setState({show : !this.state.show})\n        }}\n        >\n           {this.state.isConnected ? 'connected' : 'disconnected'} as {this.state.name}  </h3>\n          </div>\n        <div className=\"form\">\n          <div className=\"inputs\">\n          <input type=\"text\" placeholder=\"message\" onChange={e =>   this.setState({text:e.target.value})}\n          className=\"text-inp\"\n          value={this.state.text}\n          />\n          <button\n          onClick={() => {\n            if(this.state.text)\n            {\n              this.setState({text:''})\n              this.socket.emit(\"message\",{\n                text:this.state.text,\n                id: this.state.id,\n                name : this.state.name\n              });\n            }\n          \n          }}\n\n          className=\"send\"\n          >Send</button>\n          </div>\n        </div>\n        <center>Codi-Tech Room Messages :</center>\n        <div className=\"messages\">\n          {console.log(this.state.text.oldmsgs)}\n        {this.state.oldmsgs.map((o,i) => {\n          return (\n            <div className=\"e-ms\" key={i}>\n              <div className=\"msg-header\">\n                <div className=\"sub-header\">\n                  <img src={profile} width=\"30px\"/>\n                  <p className=\"name\">{typeof o.name === \"string\" ? o.name : \"\"}</p>\n                </div>\n                <p className=\"date\">{this.date.toLocaleString()}</p>\n              </div>\n              <p className=\"msg\">{typeof o.text === \"string\" ? o.text : \"\"}</p>\n            </div>\n          )\n        })}\n        <div className=\"seperator\">\n        </div>\n         </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":91,"column":9,"nodeType":"22","endLine":91,"endColumn":42},{"ruleId":"20","severity":1,"message":"21","line":132,"column":19,"nodeType":"22","endLine":132,"endColumn":52},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]